@model AdminIndexViewModel

<div class="row">
    <div class="col-2">
        <div class="list-group list-group-flush" id="admin-list-tab" role="tablist">
            <a class="list-group-item list-group-item-action" id="list-error-threshold-list" data-toggle="list" href="#list-error-threshold" role="tab"
               onclick="loadDefaultTab()">School Years</a>
            <a class="list-group-item list-group-item-action" id="list-submissioncycles-list" data-toggle="list" href="#list-submissioncycles" role="tab"
               onclick="loadNonDefaultTab('submissioncycles')">Collection Cycles</a>
        </div>
    </div>
    <div class="col-10">
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade" id="list-error-threshold" role="tabpanel" aria-labelledby="list-error-threshold-list">
                @Html.Partial("Partials/ErrorThresholds", Model.YearsOpenForDataSubmission)
            </div>
            <div class="tab-pane fade" id="list-submissioncycles" role="tabpanel" aria-labelledby="list-submissioncycles-list">
                @Html.Partial("Partials/SubmissionCycleList", @Model.SubmissionCycles)
            </div>
        </div>
    </div>
</div>

@*Modal Section*@
@Html.Partial("Partials/AddSchoolYearModal")

@Html.Hidden("tabParam", @Request.QueryString["tab"])


@section scripts {
    <script>
        /** All Error Threshold JS Functionality **/
        $("#error-threshold-warning-button").on("click", function() {
            $("#error-threshold-warning").hide();
        });

        function loadNonDefaultTab(tabName) {
            var location = window.location.href;
            var queryStringIndex = window.location.href.indexOf('?');
            if (queryStringIndex > -1) {
                location = location.slice(0, queryStringIndex);
            }
            window.location.href = location+'?tab='+tabName;
        }

        function loadDefaultTab() {
            var queryStringIndex = window.location.href.indexOf('?');
            if (queryStringIndex > -1) {
                window.location.href = window.location.href.slice(0, queryStringIndex);
            }
        }

        function assignAnnouncementDateHandlers() {
            $('#edit-announcement-expiration').datetimepicker({ format: 'L' });
        }

        function assignSubmissionCycleDateHandlers() {
            $('#edit-submissioncycle-startDate').datetimepicker({ format: 'L' });
            $('#edit-submissioncycle-endDate').datetimepicker({ format: 'L' });
        }

        const ModelFieldMap = {"announcement": ["id", "priority", "message", "contactInfo", "linkUrl", "expiration"],
            "submissioncycle": ["id", "schoolYearId", "collectionId", "startDate", "endDate"]
        };

        const ModelFieldTransforms = {
            "#edit-announcement-priority": function (prioritySelector) {
                var priority = $(prioritySelector).val();
                if ($.trim(priority).length === 0) {
                    return 0;
                }
                return priority;
            }
        };

        const ModelNameToDisplay = {"announcement": "Announcement",
            "submissioncycle": "Active Dates for Collection"
        };

        var originalThreshold = "";
        $(document).ready(function () {
            var currentTab = $("[name='tabParam']");
            if (currentTab.val()) {
                var tabContentId = '#list-'+currentTab.val();
                $(tabContentId).addClass("show active");
                var tabId = '#list-'+currentTab.val()+'-list';
                $(tabId).addClass("active");
            }
            else {
                $('#list-error-threshold').addClass("show active");
                $('#list-error-threshold-list').addClass("active");
            }

            $(".save-row").hide();
            $(".cancel-row").hide();
            $(".remove-row").hide();

            $(".edit-row").on("click", function (event) {
                event.preventDefault();
                var tblRow = $(this).closest('tr');

                tblRow.find('.save-row').show();
                tblRow.find('.cancel-row').show();
                tblRow.find('.remove-row').show();

                tblRow.find('.edit-row').hide();

                // Make the whole row editable
                tblRow.find('.row-data')
                    .attr('contenteditable', 'true')
                    //.addClass('bg-warning')
                    .css('padding', '3px')
                    .focus();

                // Save original threshold value just in case of canceled use
                originalThreshold = tblRow.find('.row-data')[0].innerText;
            });

            $(".cancel-row").on('click', function (event) {
                event.preventDefault();

                var tblRow = $(this).closest('tr');

                tblRow.find('.save-row').hide();
                tblRow.find('.cancel-row').hide();
                tblRow.find('.remove-row').hide();

                tblRow.find('.edit-row').show();

                // Make the whole row editable
                tblRow.find('.row-data')
                    .attr('contenteditable', 'false')
                    .removeClass('bg-warning')
                    .removeClass('bg-danger')
                    .css('padding', '');

                // If canceled we can put in the original data they started with.
                tblRow.find('.row-data')[0].innerText = originalThreshold;
            });

            $(".save-row").on('click', function (event) {
                event.preventDefault();
                var tblRow = $(this).closest('tr');

                // Clear all white space with regex
                var threshold = tblRow.find('.row-data')[0].innerText.replace(/\s/g, "");
                var id = tblRow[0].cells[0].innerText;

                // Validate and update the threshold
                if (isNaN(threshold)) {
                    $('#error-threshold-warning').show();
                }
                else {
                    // This is to make sure the threshold does not appear with extra white spaces.
                    tblRow.find('.row-data')[0].innerText = threshold;

                    var successValue = updateThreshold(id, threshold);

                    // Ajax returns a captial T true instead of boolean
                    if (successValue != "True") {
                        $("#error-threshold-warning").show();
                    }
                    // Otherwise return it back to original state.
                    else {
                        tblRow.find('.save-row').hide();
                        tblRow.find('.cancel-row').hide();
                        tblRow.find('.remove-row').hide();

                        tblRow.find('.edit-row').show();

                        tblRow.find('.row-data')
                            .attr('contenteditable', 'false')
                            .removeClass('bg-danger')
                            .removeClass('bg-warning')
                            .css('padding', '');
                    }
                }
            });

            // Setting the end year for the user in the add error threshold.
            $("#add-start-year").change(function () {
                $("#add-end-year").val(Number($("#add-start-year").val()) + 1);
            });

            var AddAnnouncementRoute = "@Url.Content("~/Admin/AddAnnouncement")";
            $("#announcement-add").click({ modalName: "Announcement", modalAddRoute: AddAnnouncementRoute }, CreateAddModal);

            var EditAnnouncementRoute = "@Url.Content("~/Admin/EditAnnouncement")";
            $(".announcement-edit").click({ modalName: "Announcement", modalEditRoute: EditAnnouncementRoute }, CreateEditModal);

            var DeleteAnnouncementRoute = "@Url.Content("~/Admin/DeleteAnnouncement")";
            $(".announcement-delete").click({ modelName: "announcement", deleteRoute: DeleteAnnouncementRoute }, DeleteModel);

            var AddSubmissionCycleRoute = "@Url.Content("~/Admin/AddSubmissionCycle")";
            $("#submissioncycle-add").click({ modalName: "SubmissionCycle", modalAddRoute: AddSubmissionCycleRoute }, CreateAddModal);

            var EditSubmissionCycleRoute = "@Url.Content("~/Admin/EditSubmissionCycle")";
            $(".submissioncycle-edit").click({ modalName: "SubmissionCycle", modalEditRoute: EditSubmissionCycleRoute }, CreateEditModal);

            var DeleteSubmissionCycleRoute = "@Url.Content("~/Admin/DeleteSubmissionCycle")";
            $(".submissioncycle-delete").click({ modelName: "submissioncycle", deleteRoute: DeleteSubmissionCycleRoute }, DeleteModel);

            $('#submissioncycleModal').on('shown.bs.modal', function () {
                setModalHeaderText("submissioncycle", ModelNameToDisplay["submissioncycle"]);
                assignSubmissionCycleDateHandlers();
                $("#save-submissioncycle").click({ modalName: "SubmissionCycle", additionalFunction: assignSubmissionCycleDateHandlers }, saveModel);
            });

            $('#announcementModal').on('shown.bs.modal', function () {
                setModalHeaderText("announcement", ModelNameToDisplay["announcement"]);
                assignAnnouncementDateHandlers();
                $("#save-announcement").click({ modalName: "Announcement", additionalFunction: assignAnnouncementDateHandlers }, saveModel);
            });
        });

        function CreateAddModal(event) {
            var modalNameRaw = event.data.modalName;
            var modalAddRoute = event.data.modalAddRoute;
            var modelName = modalNameRaw.toLowerCase();
            var modelModalContent = '#'+modelName+'-modal-content';
            var modelModal = '#'+modelName+'Modal';
            var modelDisplayName = ModelNameToDisplay[modelName];

            var options = { "backdrop": "static", keyboard: true };
            $.ajax({
                type: "GET",
                url: modalAddRoute,
                contentType: "application/json; charset=utf-8",
                data: {},
                datatype: "json",
                success: function (data) {
                    $(modelModalContent).html(data);
                    $(modelModal).modal(options);
                    $(modelModal).modal('show');
                },
                error: function () {
                    alert('Could not open a dialog to create '+modelDisplayName);
                }
            });
        }

        function CreateEditModal(event) {
            var modalNameRaw = event.data.modalName;
            var modalEditRoute = event.data.modalEditRoute;
            var modelName = modalNameRaw.toLowerCase();
            var modelModalContent = '#'+modelName+'-modal-content';
            var modelModal = '#'+modelName+'Modal';
            var $buttonClicked = $(this);
            var id = $buttonClicked.attr('data-id');
            var options = { "backdrop": "static", keyboard: true };
            $.ajax({
                type: "GET",
                url: modalEditRoute,
                contentType: "application/json; charset=utf-8",
                data: { "Id": id },
                datatype: "json",
                success: function (data) {
                    $(modelModalContent).html(data);
                    $(modelModal).modal(options);
                    $(modelModal).modal('show');
                },
                error: function () {
                    alert('Could not retrieve the '+modalNameRaw+' for editing.');
                }
            });
        }

        function DeleteModel(event) {
            var  modelName = event.data.modelName;
            var deleteRoute = event.data.deleteRoute;
            var modelDisplayName = ModelNameToDisplay[modelName];

            var $buttonClicked = $(this);
            var id = $buttonClicked.attr('data-id');
            if (confirm('Are you sure you want to delete this '+modelDisplayName+'?')) {
                $.ajax({
                    type: "DELETE",
                    url: deleteRoute+'/'+id,
                    success: function (data) {
                        location.reload(true);
                    },
                    error: function () {
                        alert('Could not delete the '+modelDisplayName);
                    }
                });
            }
        };

        function saveModel(event) {
            debugger;
            event.preventDefault();
            var modalNameRaw = event.data.modalName;
            var additionalFunction = event.data.additionalFunction;
            var modelName = modalNameRaw.toLowerCase();
            $('#save-'+modelName).prop("disabled", true);
            var saveRoute = '@Url.Content("~/Admin/Save")' + modalNameRaw;
            var modelFieldNames = ModelFieldMap[modelName];
            var dataObj = getMappedModel(modelName, modelFieldNames);
            var jsonData = JSON.stringify(dataObj);
            var options = { "backdrop": "static", keyboard: true };
            $.ajax({
                type: "POST",
                url: saveRoute,
                contentType: "application/json; charset=utf-8",
                data: jsonData,
                datatype: "json",
                success: function (data) {
                    var tempData = $(data);
                    var validationSummaryContents = "";
                    var validationSummary = tempData.find('#'+modelName+'-validation-summary-row');
                    if (validationSummary) {
                        validationSummaryContents = validationSummary.text();
                    }
                    // If validationSummaryContents contains more than just whitespace,
                    // then validation summary contains errors, and we should re-show the modal
                    if ($.trim(validationSummaryContents).length > 0) {
                        $('#'+modelName+'-modal-content').html(data);
                        $('#'+modelName+'Modal').modal(options);
                        $('#'+modelName+'Modal').modal('show');
                        // Need to reattach event handlers to some of the modal's fields, because
                        // when the modal's HTML got repopulated above, the event handlers disappeared
                        setModalHeaderText(modelName, ModelNameToDisplay[modelName]);
                        if (additionalFunction) {
                            additionalFunction();
                        }
                        $('#save-'+modelName).click({ modalName: modalNameRaw, additionalFunction: additionalFunction }, saveModel);
                    }
                    else {
                        var locationUrl = location.href;
                        var urlContainsModelName = locationUrl.includes(modelName + 's');
                        if (!urlContainsModelName) {
                            location.href = location.href+'?tab='+modelName+'s';
                        }
                        location.reload(true);
                    }
                },
                error: function (data) {
                    $('#'+modelName+'-modal-content').html(data);
                    $('#'+modelName+'Modal').modal(options);
                    $('#'+modelName+'Modal').modal('show');
                    // Need to reattach event handlers to some of the modal's fields, because
                    // when the modal's HTML got repopulated above, the event handlers disappeared
                    if (additionalFunction) {
                        additionalFunction();
                    }
                    $('#save-'+modelName).click({ modalName: modalNameRaw, additionalFunction: additionalFunction }, saveModel);
                }
            });
        }

        function getMappedModel(modelName, modelFieldNames) {
            var dataObj = {};
            var fieldVal = "";
            debugger;
            for (var i = 0; i < modelFieldNames.length; i++) {
                var fieldName = modelFieldNames[i];
                var fieldSelector = '#edit-'+modelName+'-'+fieldName;
                var fieldValFunc = ModelFieldTransforms[fieldSelector];
                if (fieldValFunc) {
                    fieldVal = fieldValFunc(fieldSelector);
                }
                else {
                    fieldVal = $(fieldSelector).val();
                }
                dataObj[fieldName] = fieldVal;
            }
            return dataObj;
        }

        function setAnnouncementHeaderText() {
            var announcementHeader = $('#announcement-header');
            var id = $('#edit-announcement-id').val();
            if (id > 0) {
                announcementHeader.text("Edit Announcement");
            }
        }

        function setModalHeaderText(modalName, modalTitle) {
            var modalHeader = $('#'+modalName+'-header');
            var id = $('#edit-'+modalName+'-id').val();
            if (id > 0) {
                modalHeader.text('Edit '+modalTitle);
            }
        }

        function updateThreshold(id, errorThreshold) {
            var value;
            $.ajax({
                url: '@(Url.Action("UpdateThresholdErrorValue", "Admin"))',
                async: true,
                data: { Id: id, thresholdValue: errorThreshold },
                success: function (result) {
                    value = result;
                }
            });
            return value;
        }

        function submitNewSchoolYears() {
            $("#submit-school-years-form").submit();
        }

        function removeSchoolYear(id, yearsRange) {
            if (confirm("Are you sure you want to delete " + yearsRange + "?")) {
                $.ajax({
                    url: '@(Url.Action("RemoveSchoolYear", "Admin"))',
                    async: false,
                    data: { Id: id },
                    success: function () {
                        location.reload();
                    }
                });
            }
        }
    </script>
}